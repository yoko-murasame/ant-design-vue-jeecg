# Dockerfile文件中的完整配置参考
server {
    server_name www.abc.com;
    listen 8888;
    # # ssl配置-ssl端口
    # listen 8888 ssl;
    # # ssl配置-ssl证书，crt和pem都可以
    # ssl_certificate /var/ssl/www.abc.com.pem;
    # # ssl配置-ssl证书，key
    # ssl_certificate_key /var/ssl/www.abc.com.key;
    # # http重定向到https（务必开启）
    # error_page 497 https://www.abc.com:8888$request_uri;
    # # SSL安全-设置 SSL 会话的超时时间
    # ssl_session_timeout 5m;
    # # SSL安全-在共享内存中分配 10MB 用于缓存 SSL 会话
    # ssl_session_cache shared:MozSSL:10m;
    # # SSL安全-禁用 SSL 会话票据，用于在不使用服务器端会话缓存的情况下恢复 SSL 会话。禁用它可以增加安全性，因为它避免了潜在的票据重用问题
    # ssl_session_tickets off;
    # # SSL安全-只允许使用 TLS 1.2 和 TLS 1.3 协议，禁用了较旧且不安全的版本（如 TLS 1.0 和 TLS 1.1）
    # ssl_protocols    TLSv1.2 TLSv1.3;
    # # SSL安全-不优先使用服务器端的首选算法，允许客户端选择密码套件。通常，客户端会选择它支持的最强密码套件。
    # ssl_prefer_server_ciphers off;
    # # SSL安全-加密算法，在启用服务器端的首选算法时配置
    # # ssl_ciphers HIGH:!NULL:!aNULL:!MD5:!DES:!3DES;
    #index index.php index.html index.htm default.php default.htm default.html;
    gzip on;
    gzip_static on;
    gzip_min_length 1k;
    gzip_comp_level 4;
    gzip_proxied any;
    gzip_types text/plain text/xml text/css;
    gzip_vary on;
    gzip_disable "MSIE [1-6]\.(?!.*SV1)";
    client_max_body_size 1000m;
    # add_header Access-Control-Allow-Origin *;
    # add_header Access-Control-Allow-Headers X-Requested-With;
    # add_header Access-Control-Allow-Methods GET,PUT,POST,DELETE,OPTIONS;
    # 在nginx的server中添加
    set $method $request_method;
    if ($http_X_HTTP_Method_Override ~* 'DELETE') {
        set $method DELETE;
    }
    if ($http_X_HTTP_Method_Override ~* 'PUT') {
        set $method PUT;
    }
    proxy_method $method;
    # 避免端点安全问题
    if ($request_uri ~* '/actuator') {
        return 403;
    }
    # 放行options
    if ($method = 'OPTIONS') {
        return 204;
    }
    # 引入自定义的location块配置
    include /var/conf/location/*.conf;
    # 后端接口
    location ^~ /jeecg-boot/ {
        proxy_pass              http://127.0.0.1:8081/jeecg-boot/;
        proxy_set_header        Host www.abc.com:8888;
        proxy_set_header        API-GATEWAY-PROXY-PATH http://www.abc.com:8888/jeecg-boot/;
        proxy_set_header        X-Real-IP $remote_addr;
        proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_connect_timeout 60s;
        proxy_read_timeout 7200s;
        proxy_send_timeout 60s;
        # 下面配置在反代到某些https网址，包含重定向等规则时使用
        # proxy_redirect off; # proxy_redirect http://backend_server http://frontend_server; 将上游服务器返回的 Location 头部中的 URL 从 http://backend_server 替换为 http://frontend_server
        # proxy_ssl_server_name on; # 启用 SNI
        # proxy_ssl_name backend_server; # 可选：指定上游服务器的名称
        # sub_filter cloud.sakurasep.club $server_name; # 修改服务器返回给客户端的 HTML、CSS、JavaScript 等文件的内容
        # sub_filter_once off; # 只修改一次
    }
    # 忽略favicon.ico文件的错误日志
    location ~* /favicon\.ico$ {
        log_not_found off;
        access_log off;
        try_files $uri =204;
    }
    # 先匹配非子应用，根目录访问
    location / {
        root   /var/www/custom;
        index  index.html index.htm;
        try_files $uri $uri/ index.html;
    }
    # 再匹配子应用，解决Router(mode: 'history')模式下，刷新路由地址不能找到页面的问题
    location ~* ^/(.+?)(/.*)?$ {
        root   /var/www/custom;
        index  index.html index.htm;
        #解决动态子应用的刷新问题
        set $base_path /$1;
        set $index_path $base_path/index.html;
        try_files $uri $uri/ $index_path;
    }
    access_log  /var/log/nginx/access-$host-$server_port-$logDate.log;
    open_log_file_cache max=10;
}
